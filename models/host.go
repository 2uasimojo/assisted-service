// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Host host
//
// swagger:model host
type Host struct {
	Base

	HostCreateParams

	// cluster id
	// Format: uuid
	ClusterID strfmt.UUID `json:"cluster_id,omitempty"`

	// connectivity
	// Required: true
	Connectivity *ConnectivityReport `json:"connectivity"`

	// hardware info
	// Required: true
	HardwareInfo *Introspection `json:"hardware_info"`

	// status
	// Required: true
	// Enum: [discovering known disconnected insufficient disabled installing installed]
	Status *string `json:"status"`

	// status info
	// Required: true
	StatusInfo *string `json:"status_info"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Host) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Base
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Base = aO0

	// AO1
	var aO1 HostCreateParams
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.HostCreateParams = aO1

	// AO2
	var dataAO2 struct {
		ClusterID strfmt.UUID `json:"cluster_id,omitempty"`

		Connectivity *ConnectivityReport `json:"connectivity"`

		HardwareInfo *Introspection `json:"hardware_info"`

		Status *string `json:"status"`

		StatusInfo *string `json:"status_info"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.ClusterID = dataAO2.ClusterID

	m.Connectivity = dataAO2.Connectivity

	m.HardwareInfo = dataAO2.HardwareInfo

	m.Status = dataAO2.Status

	m.StatusInfo = dataAO2.StatusInfo

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Host) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.Base)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.HostCreateParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	var dataAO2 struct {
		ClusterID strfmt.UUID `json:"cluster_id,omitempty"`

		Connectivity *ConnectivityReport `json:"connectivity"`

		HardwareInfo *Introspection `json:"hardware_info"`

		Status *string `json:"status"`

		StatusInfo *string `json:"status_info"`
	}

	dataAO2.ClusterID = m.ClusterID

	dataAO2.Connectivity = m.Connectivity

	dataAO2.HardwareInfo = m.HardwareInfo

	dataAO2.Status = m.Status

	dataAO2.StatusInfo = m.StatusInfo

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this host
func (m *Host) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Base
	if err := m.Base.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with HostCreateParams
	if err := m.HostCreateParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectivity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHardwareInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Host) validateClusterID(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterID) { // not required
		return nil
	}

	if err := validate.FormatOf("cluster_id", "body", "uuid", m.ClusterID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Host) validateConnectivity(formats strfmt.Registry) error {

	if err := validate.Required("connectivity", "body", m.Connectivity); err != nil {
		return err
	}

	if m.Connectivity != nil {
		if err := m.Connectivity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectivity")
			}
			return err
		}
	}

	return nil
}

func (m *Host) validateHardwareInfo(formats strfmt.Registry) error {

	if err := validate.Required("hardware_info", "body", m.HardwareInfo); err != nil {
		return err
	}

	if m.HardwareInfo != nil {
		if err := m.HardwareInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hardware_info")
			}
			return err
		}
	}

	return nil
}

var hostTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["discovering","known","disconnected","insufficient","disabled","installing","installed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hostTypeStatusPropEnum = append(hostTypeStatusPropEnum, v)
	}
}

// property enum
func (m *Host) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hostTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Host) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Host) validateStatusInfo(formats strfmt.Registry) error {

	if err := validate.Required("status_info", "body", m.StatusInfo); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Host) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Host) UnmarshalBinary(b []byte) error {
	var res Host
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
