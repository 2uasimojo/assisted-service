// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterUpdateParams cluster update params
//
// swagger:model cluster-update-params
type ClusterUpdateParams struct {

	// api vip
	// Format: hostname
	APIVip strfmt.Hostname `json:"apiVip,omitempty"`

	// base Dns domain
	BaseDNSDomain string `json:"baseDnsDomain,omitempty"`

	// dns vip
	// Format: hostname
	DNSVip strfmt.Hostname `json:"dnsVip,omitempty"`

	// hosts roles
	HostsRoles []*ClusterUpdateParamsHostsRolesItems0 `json:"hostsRoles" gorm:"type:varchar(64)[]"`

	// ingress vip
	// Format: hostname
	IngressVip strfmt.Hostname `json:"ingressVip,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// openshift version
	// Pattern: ^4\.\d$
	OpenshiftVersion string `json:"openshiftVersion,omitempty"`

	// SSH public key for debugging OpenShift nodes
	SSHPublicKey string `json:"sshPublicKey,omitempty"`
}

// Validate validates this cluster update params
func (m *ClusterUpdateParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIVip(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSVip(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostsRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngressVip(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenshiftVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterUpdateParams) validateAPIVip(formats strfmt.Registry) error {

	if swag.IsZero(m.APIVip) { // not required
		return nil
	}

	if err := validate.FormatOf("apiVip", "body", "hostname", m.APIVip.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ClusterUpdateParams) validateDNSVip(formats strfmt.Registry) error {

	if swag.IsZero(m.DNSVip) { // not required
		return nil
	}

	if err := validate.FormatOf("dnsVip", "body", "hostname", m.DNSVip.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ClusterUpdateParams) validateHostsRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.HostsRoles) { // not required
		return nil
	}

	for i := 0; i < len(m.HostsRoles); i++ {
		if swag.IsZero(m.HostsRoles[i]) { // not required
			continue
		}

		if m.HostsRoles[i] != nil {
			if err := m.HostsRoles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostsRoles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterUpdateParams) validateIngressVip(formats strfmt.Registry) error {

	if swag.IsZero(m.IngressVip) { // not required
		return nil
	}

	if err := validate.FormatOf("ingressVip", "body", "hostname", m.IngressVip.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ClusterUpdateParams) validateOpenshiftVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.OpenshiftVersion) { // not required
		return nil
	}

	if err := validate.Pattern("openshiftVersion", "body", string(m.OpenshiftVersion), `^4\.\d$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterUpdateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterUpdateParams) UnmarshalBinary(b []byte) error {
	var res ClusterUpdateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClusterUpdateParamsHostsRolesItems0 cluster update params hosts roles items0
//
// swagger:model ClusterUpdateParamsHostsRolesItems0
type ClusterUpdateParamsHostsRolesItems0 struct {

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// role
	// Enum: [master worker]
	Role string `json:"role,omitempty"`
}

// Validate validates this cluster update params hosts roles items0
func (m *ClusterUpdateParamsHostsRolesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterUpdateParamsHostsRolesItems0) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

var clusterUpdateParamsHostsRolesItems0TypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["master","worker"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterUpdateParamsHostsRolesItems0TypeRolePropEnum = append(clusterUpdateParamsHostsRolesItems0TypeRolePropEnum, v)
	}
}

const (

	// ClusterUpdateParamsHostsRolesItems0RoleMaster captures enum value "master"
	ClusterUpdateParamsHostsRolesItems0RoleMaster string = "master"

	// ClusterUpdateParamsHostsRolesItems0RoleWorker captures enum value "worker"
	ClusterUpdateParamsHostsRolesItems0RoleWorker string = "worker"
)

// prop value enum
func (m *ClusterUpdateParamsHostsRolesItems0) validateRoleEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, clusterUpdateParamsHostsRolesItems0TypeRolePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ClusterUpdateParamsHostsRolesItems0) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterUpdateParamsHostsRolesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterUpdateParamsHostsRolesItems0) UnmarshalBinary(b []byte) error {
	var res ClusterUpdateParamsHostsRolesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
