// Code generated by go-swagger; DO NOT EDIT.

package inventory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDownloadClusterISOParams creates a new DownloadClusterISOParams object
// with the default values initialized.
func NewDownloadClusterISOParams() *DownloadClusterISOParams {
	var ()
	return &DownloadClusterISOParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDownloadClusterISOParamsWithTimeout creates a new DownloadClusterISOParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDownloadClusterISOParamsWithTimeout(timeout time.Duration) *DownloadClusterISOParams {
	var ()
	return &DownloadClusterISOParams{

		timeout: timeout,
	}
}

// NewDownloadClusterISOParamsWithContext creates a new DownloadClusterISOParams object
// with the default values initialized, and the ability to set a context for a request
func NewDownloadClusterISOParamsWithContext(ctx context.Context) *DownloadClusterISOParams {
	var ()
	return &DownloadClusterISOParams{

		Context: ctx,
	}
}

// NewDownloadClusterISOParamsWithHTTPClient creates a new DownloadClusterISOParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDownloadClusterISOParamsWithHTTPClient(client *http.Client) *DownloadClusterISOParams {
	var ()
	return &DownloadClusterISOParams{
		HTTPClient: client,
	}
}

/*DownloadClusterISOParams contains all the parameters to send to the API endpoint
for the download cluster i s o operation typically these are written to a http.Request
*/
type DownloadClusterISOParams struct {

	/*ClusterID
	  The ID of the cluster whose ISO to download

	*/
	ClusterID strfmt.UUID
	/*ProxyIP
	  The IP address of the HTTP proxy that agents should use to access the discovery service

	*/
	ProxyIP *strfmt.Hostname
	/*ProxyPort
	  The port of the HTTP proxy

	*/
	ProxyPort *int64
	/*SSHPublicKey
	  SSH public key for debugging the installation

	*/
	SSHPublicKey *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the download cluster i s o params
func (o *DownloadClusterISOParams) WithTimeout(timeout time.Duration) *DownloadClusterISOParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the download cluster i s o params
func (o *DownloadClusterISOParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the download cluster i s o params
func (o *DownloadClusterISOParams) WithContext(ctx context.Context) *DownloadClusterISOParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the download cluster i s o params
func (o *DownloadClusterISOParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the download cluster i s o params
func (o *DownloadClusterISOParams) WithHTTPClient(client *http.Client) *DownloadClusterISOParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the download cluster i s o params
func (o *DownloadClusterISOParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the download cluster i s o params
func (o *DownloadClusterISOParams) WithClusterID(clusterID strfmt.UUID) *DownloadClusterISOParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the download cluster i s o params
func (o *DownloadClusterISOParams) SetClusterID(clusterID strfmt.UUID) {
	o.ClusterID = clusterID
}

// WithProxyIP adds the proxyIP to the download cluster i s o params
func (o *DownloadClusterISOParams) WithProxyIP(proxyIP *strfmt.Hostname) *DownloadClusterISOParams {
	o.SetProxyIP(proxyIP)
	return o
}

// SetProxyIP adds the proxyIp to the download cluster i s o params
func (o *DownloadClusterISOParams) SetProxyIP(proxyIP *strfmt.Hostname) {
	o.ProxyIP = proxyIP
}

// WithProxyPort adds the proxyPort to the download cluster i s o params
func (o *DownloadClusterISOParams) WithProxyPort(proxyPort *int64) *DownloadClusterISOParams {
	o.SetProxyPort(proxyPort)
	return o
}

// SetProxyPort adds the proxyPort to the download cluster i s o params
func (o *DownloadClusterISOParams) SetProxyPort(proxyPort *int64) {
	o.ProxyPort = proxyPort
}

// WithSSHPublicKey adds the sSHPublicKey to the download cluster i s o params
func (o *DownloadClusterISOParams) WithSSHPublicKey(sSHPublicKey *string) *DownloadClusterISOParams {
	o.SetSSHPublicKey(sSHPublicKey)
	return o
}

// SetSSHPublicKey adds the sshPublicKey to the download cluster i s o params
func (o *DownloadClusterISOParams) SetSSHPublicKey(sSHPublicKey *string) {
	o.SSHPublicKey = sSHPublicKey
}

// WriteToRequest writes these params to a swagger request
func (o *DownloadClusterISOParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param clusterId
	if err := r.SetPathParam("clusterId", o.ClusterID.String()); err != nil {
		return err
	}

	if o.ProxyIP != nil {

		// query param proxyIp
		var qrProxyIP strfmt.Hostname
		if o.ProxyIP != nil {
			qrProxyIP = *o.ProxyIP
		}
		qProxyIP := qrProxyIP.String()
		if qProxyIP != "" {
			if err := r.SetQueryParam("proxyIp", qProxyIP); err != nil {
				return err
			}
		}

	}

	if o.ProxyPort != nil {

		// query param proxyPort
		var qrProxyPort int64
		if o.ProxyPort != nil {
			qrProxyPort = *o.ProxyPort
		}
		qProxyPort := swag.FormatInt64(qrProxyPort)
		if qProxyPort != "" {
			if err := r.SetQueryParam("proxyPort", qProxyPort); err != nil {
				return err
			}
		}

	}

	if o.SSHPublicKey != nil {

		// query param sshPublicKey
		var qrSSHPublicKey string
		if o.SSHPublicKey != nil {
			qrSSHPublicKey = *o.SSHPublicKey
		}
		qSSHPublicKey := qrSSHPublicKey
		if qSSHPublicKey != "" {
			if err := r.SetQueryParam("sshPublicKey", qSSHPublicKey); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
