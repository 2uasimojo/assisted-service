// Code generated by go-swagger; DO NOT EDIT.

package inventory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostNextStepsReplyHandlerFunc turns a function with the right signature into a post next steps reply handler
type PostNextStepsReplyHandlerFunc func(PostNextStepsReplyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostNextStepsReplyHandlerFunc) Handle(params PostNextStepsReplyParams) middleware.Responder {
	return fn(params)
}

// PostNextStepsReplyHandler interface for that can handle valid post next steps reply params
type PostNextStepsReplyHandler interface {
	Handle(PostNextStepsReplyParams) middleware.Responder
}

// NewPostNextStepsReply creates a new http.Handler for the post next steps reply operation
func NewPostNextStepsReply(ctx *middleware.Context, handler PostNextStepsReplyHandler) *PostNextStepsReply {
	return &PostNextStepsReply{Context: ctx, Handler: handler}
}

/*PostNextStepsReply swagger:route POST /nodes/{node_id}/next-steps/reply inventory postNextStepsReply

Post the result of the required operations from the server

*/
type PostNextStepsReply struct {
	Context *middleware.Context
	Handler PostNextStepsReplyHandler
}

func (o *PostNextStepsReply) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostNextStepsReplyParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
