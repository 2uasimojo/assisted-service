// Code generated by go-swagger; DO NOT EDIT.

package inventory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewDownloadClusterISOParams creates a new DownloadClusterISOParams object
// no default values defined in spec.
func NewDownloadClusterISOParams() DownloadClusterISOParams {

	return DownloadClusterISOParams{}
}

// DownloadClusterISOParams contains all the bound params for the download cluster i s o operation
// typically these are obtained from a http.Request
//
// swagger:parameters DownloadClusterISO
type DownloadClusterISOParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The ID of the cluster whose ISO to download
	  Required: true
	  In: path
	*/
	ClusterID strfmt.UUID
	/*The IP address of the HTTP proxy that agents should use to access the discovery service
	  In: query
	*/
	ProxyIP *strfmt.Hostname
	/*The port of the HTTP proxy
	  Maximum: 65535
	  Minimum: 0
	  In: query
	*/
	ProxyPort *int64
	/*SSH public key for debugging the installation
	  In: query
	*/
	SSHPublicKey *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewDownloadClusterISOParams() beforehand.
func (o *DownloadClusterISOParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rClusterID, rhkClusterID, _ := route.Params.GetOK("cluster_id")
	if err := o.bindClusterID(rClusterID, rhkClusterID, route.Formats); err != nil {
		res = append(res, err)
	}

	qProxyIP, qhkProxyIP, _ := qs.GetOK("proxy_ip")
	if err := o.bindProxyIP(qProxyIP, qhkProxyIP, route.Formats); err != nil {
		res = append(res, err)
	}

	qProxyPort, qhkProxyPort, _ := qs.GetOK("proxy_port")
	if err := o.bindProxyPort(qProxyPort, qhkProxyPort, route.Formats); err != nil {
		res = append(res, err)
	}

	qSSHPublicKey, qhkSSHPublicKey, _ := qs.GetOK("ssh_public_key")
	if err := o.bindSSHPublicKey(qSSHPublicKey, qhkSSHPublicKey, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindClusterID binds and validates parameter ClusterID from path.
func (o *DownloadClusterISOParams) bindClusterID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("cluster_id", "path", "strfmt.UUID", raw)
	}
	o.ClusterID = *(value.(*strfmt.UUID))

	if err := o.validateClusterID(formats); err != nil {
		return err
	}

	return nil
}

// validateClusterID carries on validations for parameter ClusterID
func (o *DownloadClusterISOParams) validateClusterID(formats strfmt.Registry) error {

	if err := validate.FormatOf("cluster_id", "path", "uuid", o.ClusterID.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindProxyIP binds and validates parameter ProxyIP from query.
func (o *DownloadClusterISOParams) bindProxyIP(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: hostname
	value, err := formats.Parse("hostname", raw)
	if err != nil {
		return errors.InvalidType("proxy_ip", "query", "strfmt.Hostname", raw)
	}
	o.ProxyIP = (value.(*strfmt.Hostname))

	if err := o.validateProxyIP(formats); err != nil {
		return err
	}

	return nil
}

// validateProxyIP carries on validations for parameter ProxyIP
func (o *DownloadClusterISOParams) validateProxyIP(formats strfmt.Registry) error {

	if err := validate.FormatOf("proxy_ip", "query", "hostname", o.ProxyIP.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindProxyPort binds and validates parameter ProxyPort from query.
func (o *DownloadClusterISOParams) bindProxyPort(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("proxy_port", "query", "int64", raw)
	}
	o.ProxyPort = &value

	if err := o.validateProxyPort(formats); err != nil {
		return err
	}

	return nil
}

// validateProxyPort carries on validations for parameter ProxyPort
func (o *DownloadClusterISOParams) validateProxyPort(formats strfmt.Registry) error {

	if err := validate.MinimumInt("proxy_port", "query", int64(*o.ProxyPort), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("proxy_port", "query", int64(*o.ProxyPort), 65535, false); err != nil {
		return err
	}

	return nil
}

// bindSSHPublicKey binds and validates parameter SSHPublicKey from query.
func (o *DownloadClusterISOParams) bindSSHPublicKey(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.SSHPublicKey = &raw

	return nil
}
